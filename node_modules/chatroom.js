var broadcast = require('broadcast');
var BC = new broadcast.BroadCast();
module.exports = function(req, res){
    var fn = chatroom_none;
    switch(req.params.action){
        case 'post': fn = chatroom_post;break;
        case 'view': fn = chatroom_view;break;
        case 'join': fn = chatroom_join;break;
    }
    fn(req, res);
}
function chatroom_join(req, res){
    req.session.user = {
        hostid: req.query.hostid,
        nick: req.body.nick
    };
    console.log(req.body.nick + ' Join ' + req.query.hostid);
    res.redirect('/static/player.html?hostid='+req.query.hostid+'&nick='+req.body.nick);
}
function chatroom_post(req, res){
    require('advobject');
    if(!check_join(req, res)){
        if(check_host(req, res)){
            req.session.user = req.session.host.Clone();
            console.log('Host auto join ' + req.query.hostid);
        }else{
            res.json({error: ['Not join yet']});
            return;
        }
    }
    var hostid = req.query.hostid;
    var crroom = BC.loadChannel(req.query.hostid);
    var msg = req.body.msg;
    var user = req.session.user;
    var postashost = req.query.postashost && check_host(req, res);
    if(postashost){
        if(!user.class)user.class = new Object();
        user.class.host = 1;
    }
    console.log(user.nick + ' post "' + msg + '" at ' + hostid);
    crroom.postMsg(user, "msg", msg);
    res.json({});
}
function chatroom_view(req, res){
    if(!req.body.since){
        res.json({error: 'No since value'});
        return;
    }
    if(!check_join(req, res)){
        res.json({error: ['Not join yet']});
        return;
    }
    var crroom = BC.loadChannel(req.query.hostid);
    var since = parseInt(req.body.since, 10);
    crroom.readMsg(since, function(msgs){
        res.json({message: msgs});
    });
}
function chatroom_none(req, res){
    res.json({error: ['Unknow Action']});
}
function check_join(req, res){
    if(!req.session.user || req.session.user.hostid != req.query.hostid)
        return false;
    return true;
}
function check_host(req, res){
    if(!req.session.host || req.session.host.hostid != req.query.hostid)
        return false;
    return true;
}
