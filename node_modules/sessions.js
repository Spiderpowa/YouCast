var crypto = require('crypto');
var sessions = {};
var SESSION_TIMEOUT = 5*1000;
exports.CreateSession = function(timeout){
    var id;
    do{
        id = Math.floor(Math.random()*99999999999).toString();
    }while(sessions[id]);
    var sid = genSid(id);

    var session = {
        id: id,
        sid: sid,
        timestamp: new Date(),
        timeout: timeout?timeout*1000:SESSION_TIMEOUT,
        data: new Object(),

        poke: function() {
            session.timestamp = new Date();
        },

        destory: function(){
            console.log('destory '+ session.id);
            delete sessions[session.id];
        }
    };
    
    sessions[id] = session;
    return session;
}

setInterval(function(){
    var now = new Date();
    for(var id in sessions){
        if(!sessions.hasOwnProperty(id))continue;
        var session = sessions[id];
        if(now - session.timestamp > session.timeout)
            session.destory();
     }
}, 1000);
            
function genSid(id){
    var salt = crypto.createHash('sha1');
    salt.update(Math.floor(Math.random()*99999999).toString());
    salt = salt.digest('hex').substr(0, 5);
    var sid = salt + '#' + saltSid(id, salt);
    return sid;
}

function saltSid(id, salt){
    var hash = crypto.createHash('sha1');
    hash.update(salt + '#' + id);
    return hash.digest('hex');
}
